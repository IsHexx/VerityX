POST http://localhost:8089/api/testplans
Content-Type: application/json

{
  "planName": "Test Plan 3",
  "description": "This is a description for Test Plan 1.",
  "projectId": 101,
  "status": "pending",
  "participants": "1,2,3",
  "startDate": "2024-11-20",
  "endDate": "2024-11-30",
  "planVersion": "v1.0"
}

###
###
GET http://localhost:8089/api/testplans
Accept: application/json

###
# @no-cookie-jar
GET http://localhost:8089/api/user/test
Accept: application/json

###
POST http://localhost:8089/api/user/login
Content-Type: application/json

{
  "username": "admin",
  "password": "123456"
}

### ApiTestReport接口测试

### 创建API测试报告
POST http://localhost:8089/api/apitestreports
Content-Type: application/json

{
  "apiName": "测试API",
  "url": "http://localhost:8089/",
  "method": "POST",
  "status": "成功",
  "responseTime": 120,
  "executionTime": "2023-05-15T10:30:00.000+08:00",
  "executor": "测试人员1",
  "headers": "{\"Content-Type\": \"application/json\"}",
  "params": "{\"username\": \"admin\", \"password\": \"123456\"}",
  "response": "{\"code\": 200, \"message\": \"登录成功\", \"data\": {\"token\": \"xxx\"}}"
}

### 获取API测试报告列表（分页）
GET http://localhost:8089/api/apitestreports/list?page=1&pageSize=10&keyword=登录&status=成功
Accept: application/json

### 获取API测试报告详情
GET http://localhost:8089/api/apitestreports/1
Accept: application/json

### 更新API测试报告
PUT http://localhost:8089/api/apitestreports/1
Content-Type: application/json

{
  "apiName": "用户登录API-更新",
  "url": "http://localhost:8089/api/user/login",
  "method": "POST",
  "status": "失败",
  "responseTime": 150,
  "executionTime": "2023-05-15T10:35:00.000+08:00",
  "executor": "测试人员2",
  "headers": "{\"Content-Type\": \"application/json\"}",
  "params": "{\"username\": \"admin\", \"password\": \"wrong_password\"}",
  "response": "{\"code\": 401, \"message\": \"密码错误\"}"
}

### 删除API测试报告
DELETE http://localhost:8089/api/apitestreports/1
Accept: application/json

### 批量删除API测试报告
POST http://localhost:8089/api/apitestreports/batch-delete
Content-Type: application/json

{
  "ids": [2, 3, 4]
}

### 导出API测试报告
GET http://localhost:8089/api/apitestreports/1/export
Accept: application/json

### API环境管理接口测试

### 1. 创建API环境配置
POST http://localhost:8089/api/environments
Content-Type: application/json

{
  "envName": "预发布环境",
  "baseUrl": "http://staging-api.example.com",
  "description": "用于预发布阶段的API测试环境",
  "isDefault": false,
  "globalHeaders": "{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer staging-token\"}",
  "globalParams": "{\"version\":\"v1\",\"debug\":\"true\"}"
}

### 2. 获取API环境配置列表（分页）
GET http://localhost:8089/api/environments/list?page=1&pageSize=10&keyword=开发
Accept: application/json

### 3. 获取所有环境配置（用于下拉选择）
GET http://localhost:8089/api/environments
Accept: application/json

### 4. 获取默认环境配置
GET http://localhost:8089/api/environments/default
Accept: application/json

### 5. 获取单个环境配置详情
GET http://localhost:8089/api/environments/1
Accept: application/json

### 6. 更新环境配置
PUT http://localhost:8089/api/environments/1
Content-Type: application/json

{
  "envName": "开发环境-更新",
  "baseUrl": "http://dev-api.example.com",
  "description": "更新后的开发环境描述",
  "isDefault": false,
  "globalHeaders": "{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer updated-dev-token\",\"X-API-Version\":\"2.0\"}",
  "globalParams": "{\"version\":\"v2\",\"debug\":\"true\"}"
}

### 7. 设置为默认环境
PUT http://localhost:8089/api/environments/1/default
Accept: application/json

### 8. 删除环境配置
DELETE http://localhost:8089/api/environments/2
Accept: application/json

### 9. 批量删除环境配置
POST http://localhost:8089/api/environments/batch-delete
Content-Type: application/json

{
  "ids": [3, 4, 5]
}

### UI测试用例管理接口测试 

### 1. 创建UI测试用例
POST http://localhost:8089/api/uitestcases
Content-Type: application/json

{
  "caseTitle": "用户登录功能测试",
  "projectId": "1",
  "importanceLevel": "P1",
  "environment": "Chrome",
  "precondition": "系统已部署且可访问",
  "description": "验证用户使用有效凭据可以成功登录系统",
  "steps": [
    {
      "actionType": "navigate",
      "targetUrl": "http://localhost:8089/login",
      "description": "打开登录页面"
    },
    {
      "actionType": "input",
      "locatorType": "id",
      "locatorValue": "username",
      "inputValue": "admin",
      "description": "输入用户名"
    },
    {
      "actionType": "input",
      "locatorType": "id",
      "locatorValue": "password",
      "inputValue": "123456",
      "description": "输入密码"
    },
    {
      "actionType": "click",
      "locatorType": "css",
      "locatorValue": "button[type='submit']",
      "description": "点击登录按钮"
    },
    {
      "actionType": "assertText",
      "locatorType": "css",
      "locatorValue": ".welcome-message",
      "inputValue": "欢迎回来",
      "description": "验证登录成功后的欢迎信息"
    }
  ],
  "timeout": 30,
  "retryCount": 1,
  "screenshotPolicy": "failureOnly",
  "parameters": [
    {
      "name": "username",
      "value": "admin"
    },
    {
      "name": "password",
      "value": "123456"
    }
  ]
}

###
### 2. 获取UI测试用例列表（全部）
GET http://localhost:8089/api/uitestcases/list?page=1&pageSize=10
Accept: application/json

###
### 3. 获取UI测试用例列表（带关键字过滤）
GET http://localhost:8089/api/uitestcases/list?page=1&pageSize=10&keyword=登录
Accept: application/json

###
### 4. 获取UI测试用例列表（已执行）
GET http://localhost:8089/api/uitestcases/list?page=1&pageSize=10&status=executed
Accept: application/json

###
### 5. 获取UI测试用例列表（未执行）
GET http://localhost:8089/api/uitestcases/list?page=1&pageSize=10&status=unexecuted
Accept: application/json

###
### 6. 获取UI测试用例详情
GET http://localhost:8089/api/uitestcases/UI-001
Accept: application/json

###
### 7. 更新UI测试用例
PUT http://localhost:8089/api/uitestcases/UI-001
Content-Type: application/json

{
  "caseTitle": "用户登录功能测试-更新版",
  "projectId": "1",
  "importanceLevel": "P0",
  "environment": "Chrome",
  "precondition": "系统已部署且可访问",
  "description": "验证用户使用有效凭据可以成功登录系统并跳转到首页",
  "steps": [
    {
      "actionType": "navigate",
      "targetUrl": "http://localhost:8089/login",
      "description": "打开登录页面"
    },
    {
      "actionType": "input",
      "locatorType": "id",
      "locatorValue": "username",
      "inputValue": "admin",
      "description": "输入用户名"
    },
    {
      "actionType": "input",
      "locatorType": "id",
      "locatorValue": "password",
      "inputValue": "123456",
      "description": "输入密码"
    },
    {
      "actionType": "click",
      "locatorType": "css",
      "locatorValue": "button[type='submit']",
      "description": "点击登录按钮"
    },
    {
      "actionType": "wait",
      "waitTime": 1000,
      "description": "等待页面跳转"
    },
    {
      "actionType": "assertText",
      "locatorType": "css",
      "locatorValue": ".welcome-message",
      "inputValue": "欢迎回来，管理员",
      "description": "验证登录成功后的欢迎信息"
    },
    {
      "actionType": "assertExists",
      "locatorType": "css",
      "locatorValue": ".dashboard-container",
      "description": "验证已跳转到首页"
    }
  ],
  "timeout": 30,
  "retryCount": 2,
  "screenshotPolicy": "everyStep",
  "parameters": [
    {
      "name": "username",
      "value": "admin"
    },
    {
      "name": "password",
      "value": "123456"
    }
  ]
}

###
### 8. 删除UI测试用例
DELETE http://localhost:8089/api/uitestcases/UI-001
Accept: application/json

###
### 9. 执行UI测试用例
POST http://localhost:8089/api/uitestcases/UI-001/execute
Accept: application/json

###
### 10. 创建另一个UI测试用例（商品搜索）
POST http://localhost:8089/api/uitestcases
Content-Type: application/json

{
  "caseTitle": "商品搜索功能测试",
  "projectId": "1",
  "importanceLevel": "P2",
  "environment": "Firefox",
  "precondition": "系统已部署且用户已登录",
  "description": "验证用户可以通过搜索功能找到指定商品",
  "steps": [
    {
      "actionType": "navigate",
      "targetUrl": "http://localhost:8089/products",
      "description": "打开商品页面"
    },
    {
      "actionType": "input",
      "locatorType": "id",
      "locatorValue": "search-input",
      "inputValue": "手机",
      "description": "在搜索框中输入'手机'"
    },
    {
      "actionType": "click",
      "locatorType": "id",
      "locatorValue": "search-button",
      "description": "点击搜索按钮"
    },
    {
      "actionType": "wait",
      "waitTime": 1500,
      "description": "等待搜索结果加载"
    },
    {
      "actionType": "assertExists",
      "locatorType": "css",
      "locatorValue": ".product-list .product-item",
      "description": "验证搜索结果中存在商品"
    },
    {
      "actionType": "getText",
      "locatorType": "css",
      "locatorValue": ".search-result-count",
      "description": "获取搜索结果数量"
    }
  ],
  "timeout": 25,
  "retryCount": 1,
  "screenshotPolicy": "failureOnly",
  "parameters": [
    {
      "name": "searchKeyword",
      "value": "手机"
    }
  ]
}

### UI测试套件管理接口测试

### 1. 创建UI测试套件
POST http://localhost:8089/api/uitestsuites/create
Content-Type: application/json

{
  "suiteName": "登录功能测试套件",
  "projectId": 1,
  "description": "测试系统登录相关功能的测试套件",
  "executeInParallel": false,
  "maxParallelCount": 1
}

### 2. 获取UI测试套件列表（分页）
GET http://localhost:8089/api/uitestsuites/list?page=1&pageSize=10&keyword=登录
Accept: application/json

### 3. 获取UI测试套件详情
GET http://localhost:8089/api/uitestsuites/1
Accept: application/json

### 4. 更新UI测试套件
PUT http://localhost:8089/api/uitestsuites/1
Content-Type: application/json

{
  "suiteName": "用户登录功能测试套件-更新版",
  "projectId": 1,
  "description": "对系统登录和注册功能进行全面测试的套件",
  "executeInParallel": true,
  "maxParallelCount": 2
}

### 5. 删除UI测试套件
DELETE http://localhost:8089/api/uitestsuites/1
Accept: application/json

### 6. 获取测试套件关联的用例列表
GET http://localhost:8089/api/uitestsuites/1/cases
Accept: application/json

### 7. 更新测试套件关联的用例
PUT http://localhost:8089/api/uitestsuites/1/cases
Content-Type: application/json

{
  "caseIds": [1, 2, 3, 4]
}

### 8. 执行UI测试套件
POST http://localhost:8089/api/uitestsuites/1/execute
Accept: application/json

### 9. 创建另一个UI测试套件（商品功能测试）
POST http://localhost:8089/api/uitestsuites
Content-Type: application/json

{
  "suiteName": "商品模块测试套件",
  "projectId": 2,
  "description": "测试商品搜索、浏览、加入购物车等功能",
  "executeInParallel": true,
  "maxParallelCount": 3
}

### UI元素定位器管理接口测试

### 1. 获取UI元素列表（分页）- 原始路径
GET http://localhost:8089/api/ui-elements/list?page=1&pageSize=10
Accept: application/json

### 1a. 获取UI元素列表（分页）- 尝试去掉末尾斜杠
GET http://localhost:8089/api/ui-elements/list?page=1&pageSize=10
Accept: application/json

### 1b. 获取UI元素列表（分页）- 尝试加末尾斜杠
GET http://localhost:8089/api/ui-elements/list/?page=1&pageSize=10
Accept: application/json

### 1c. 获取UI元素列表（分页）- 尝试不同根路径
GET http://localhost:8089/api/ui-elements?page=1&pageSize=10
Accept: application/json

### 1d. 获取UI元素列表（分页）- 尝试不使用/api前缀
GET http://localhost:8089/ui-elements/list?page=1&pageSize=10
Accept: application/json

### 2. 获取UI元素列表（带关键词过滤）
GET http://localhost:8089/api/ui-elements/list?page=1&pageSize=10&keyword=登录
Accept: application/json

### 3. 获取UI元素列表（按分组筛选）
GET http://localhost:8089/api/ui-elements/list?page=1&pageSize=10&groupId=1
Accept: application/json

### 4. 获取UI元素列表（按定位器类型筛选）
GET http://localhost:8089/api/ui-elements/list?page=1&pageSize=10&locatorType=CSS
Accept: application/json

### 5. 获取UI元素详情
GET http://localhost:8089/api/ui-elements/1
Accept: application/json

### 6. 创建UI元素
POST http://localhost:8089/api/ui-elements/create
Content-Type: application/json

{
  "elementName": "登录按钮",
  "groupId": 1,
  "locatorType": "CSS",
  "locatorValue": "#login-btn",
  "description": "登录页面的登录按钮",
  "pageUrl": "http://localhost:8089/login"
}

### 7. 更新UI元素
PUT http://localhost:8089/api/ui-elements/update/1
Content-Type: application/json

{
  "elementName": "登录按钮-更新",
  "groupId": 1,
  "locatorType": "ID",
  "locatorValue": "login-button",
  "description": "更新后的登录按钮描述",
  "pageUrl": "http://localhost:8089/login"
}

### 8. 删除UI元素
DELETE http://localhost:8089/api/ui-elements/delete/1
Accept: application/json

### 9. 验证元素定位器
POST http://localhost:8089/api/ui-elements/validate
Content-Type: application/json

{
  "locatorType": "CSS",
  "locatorValue": "#login-btn",
  "url": "http://localhost:8089/login"
}

### 10. 上传元素截图（使用multipart表单，不能直接在HTTP文件中测试，需要使用Postman等工具）
# POST http://localhost:8089/api/ui-elements/1/screenshot
# Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
# 
# ------WebKitFormBoundary7MA4YWxkTrZu0gW
# Content-Disposition: form-data; name="file"; filename="screenshot.png"
# Content-Type: image/png
# 
# < ./screenshot.png
# ------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 11. 获取元素分组列表
GET http://localhost:8089/api/ui-elements/groups
Accept: application/json

### 12. 创建元素分组
POST http://localhost:8089/api/ui-elements/groups/create
Content-Type: application/json

{
  "groupName": "登录页面元素",
  "description": "登录页面的所有UI元素",
  "parentId": null
}

### 13. 创建子元素分组
POST http://localhost:8089/api/ui-elements/groups/create
Content-Type: application/json

{
  "groupName": "登录表单元素",
  "description": "登录表单中的所有UI元素",
  "parentId": 1
}

### 14. 更新元素分组
PUT http://localhost:8089/api/ui-elements/groups/update/1
Content-Type: application/json

{
  "groupName": "登录页面元素-更新",
  "description": "更新后的登录页面元素分组描述",
  "parentId": null
}

### 15. 删除元素分组
DELETE http://localhost:8089/api/ui-elements/groups/delete/2
Accept: application/json

### UI测试执行接口测试

### 1. 创建执行记录 - 单个用例
POST http://localhost:8089/api/ui-test-executions/create
Content-Type: application/json

{
  "executionName": "测试执行01",
  "executionType": "case",
  "executionSourceId": 1,
  "environment": "chrome",
  "caseIds": [1],
  "priority": 0,
  "executionConfig": "{\"screenshotOnFailure\": true, \"retryCount\": 1}"
}

### 2. 创建执行记录 - 测试套件
POST http://localhost:8089/api/ui-test-executions/create
Content-Type: application/json

{
  "executionName": "套件执行01",
  "executionType": "suite",
  "executionSourceId": 1,
  "environment": "chrome",
  "priority": 1,
  "executionConfig": "{\"screenshotOnFailure\": true, \"retryCount\": 1}"
}

### 3. 获取执行详情
GET http://localhost:8089/api/ui-test-executions/1
Accept: application/json


### 4. 分页查询执行记录
GET http://10.65.81.71:8089/api/ui-test-executions/list?page=1&pageSize=10
Accept: application/json

### 5. 分页查询执行记录 - 带筛选条件
GET http://localhost:8089/api/ui-test-executions/list?page=1&pageSize=10&keyword=测试&status=completed&executionType=case
Accept: application/json

### 6. 获取执行队列
GET http://localhost:8089/api/ui-test-executions/queue?page=1&pageSize=10
Accept: application/json

### 7. 获取执行队列 - 筛选等待状态
GET http://localhost:8089/api/ui-test-executions/queue?page=1&pageSize=10&status=waiting
Accept: application/json

### 8. 获取执行用例详情列表
GET http://localhost:8089/api/ui-test-executions/1/details
Accept: application/json

### 9. 获取执行用例详情
GET http://localhost:8089/api/ui-test-executions/details/1
Accept: application/json

### 10. 获取执行步骤列表
GET http://localhost:8089/api/ui-test-executions/details/1/steps
Accept: application/json

### 11. 获取执行日志
GET http://localhost:8089/api/ui-test-executions/1/logs?page=1&pageSize=50
Accept: application/json

### 12. 获取执行日志 - 筛选错误日志
GET http://localhost:8089/api/ui-test-executions/1/logs?page=1&pageSize=50&logLevel=error
Accept: application/json

### 13. 获取用例执行日志
GET http://localhost:8089/api/ui-test-executions/details/1/logs
Accept: application/json

### 14. 开始执行
POST http://localhost:8089/api/ui-test-executions/1/start
Accept: application/json

### 15. 中止执行
POST http://localhost:8089/api/ui-test-executions/1/abort?reason=手动终止
Accept: application/json

### 16. 记录执行步骤结果
POST http://localhost:8089/api/ui-test-executions/steps/record
Content-Type: application/json

{
  "detailId": 1,
  "stepIndex": 1,
  "stepName": "打开登录页面",
  "actionType": "navigate",
  "target": "http://localhost:8089/login",
  "inputValue": "",
  "expectedResult": "页面成功打开",
  "actualResult": "页面成功打开",
  "status": "passed",
  "duration": 1500
}

### 17. 记录日志
POST http://localhost:8089/api/ui-test-executions/logs/record
Content-Type: application/json

{
  "executionId": 1,
  "detailId": 1,
  "logLevel": "info",
  "logContent": "执行开始",
  "stepIndex": 0,
  "timestamp": "2023-08-15T10:00:00.000Z"
}

### 18. 更新执行状态
PUT http://localhost:8089/api/ui-test-executions/1/status?status=completed
Accept: application/json

### 19. 删除执行记录
DELETE http://localhost:8089/api/ui-test-executions/1
Accept: application/json

### UI测试报告接口测试

### 1. 创建测试报告
POST http://localhost:8089/api/ui-test-reports
Content-Type: application/json

{
  "executionId": 101,
  "reportName": "登录功能自动化测试报告333",
  "reportType": "用例执行",
  "environment": "Chrome",
  "browser": "Chrome 95.0",
  "startTime": "2023-05-15T10:30:00.000+08:00",
  "endTime": "2023-05-15T10:35:10.000+08:00",
  "duration": 310000,
  "totalCases": 5,
  "passedCases": 5,
  "failedCases": 0,
  "skippedCases": 0,
  "executor": "测试人员1",
  "reportContent": "{\"summary\":\"登录功能自动化测试报告\",\"details\":\"详细内容...\"}"
}

### 2. 从执行ID生成测试报告
POST http://localhost:8089/api/ui-test-reports/generate/102
Content-Type: application/json

### 3. 获取测试报告列表（分页）
GET http://localhost:8089/api/ui-test-reports/list?page=1&pageSize=10&keyword=登录&reportType=用例执行
Accept: application/json

### 4. 获取测试报告详情
GET http://localhost:8089/api/ui-test-reports/1
Accept: application/json

### 5. 根据执行ID获取测试报告
GET http://localhost:8089/api/ui-test-reports/execution/101
Accept: application/json

### 6. 更新测试报告
PUT http://localhost:8089/api/ui-test-reports/1
Content-Type: application/json

{
  "reportName": "登录功能自动化测试报告-更新版",
  "reportType": "套件执行",
  "environment": "Chrome",
  "browser": "Chrome 95.0",
  "startTime": "2023-05-15T10:30:00.000+08:00",
  "endTime": "2023-05-15T10:38:20.000+08:00",
  "duration": 500000,
  "totalCases": 8,
  "passedCases": 6,
  "failedCases": 1,
  "skippedCases": 1,
  "executor": "测试人员2"
}

### 7. 删除测试报告
DELETE http://localhost:8089/api/ui-test-reports/2
Accept: application/json

### 8. 批量删除测试报告
POST http://localhost:8089/api/ui-test-reports/batch-delete
Content-Type: application/json

{
  "ids": [3, 4, 5]
}

### 9. 获取测试报告详情列表（分页）
GET http://localhost:8089/api/ui-test-reports/1/details?page=1&pageSize=10&result=failed
Accept: application/json

### 10. 获取测试报告详情
GET http://localhost:8089/api/ui-test-reports/details/1
Accept: application/json

### 11. 获取测试步骤列表
GET http://localhost:8089/api/ui-test-reports/details/1/steps
Accept: application/json

### 12. 导出测试报告
GET http://localhost:8089/api/ui-test-reports/1/export?format=html
Accept: application/json

### UI测试配置接口测试

### 1. 创建UI测试配置（浏览器配置）
POST http://localhost:8089/api/ui-test-config
Content-Type: application/json

{
  "configName": "Firefox浏览器配置",
  "configType": "BROWSER",
  "browserType": "FIREFOX",
  "browserVersion": "latest",
  "deviceType": "DESKTOP",
  "platformName": "WINDOWS",
  "defaultWaitTimeout": 15,
  "pageLoadTimeout": 30,
  "scriptTimeout": 30,
  "headless": false,
  "isDefault": false,
  "isActive": true
}

### 2. 创建UI测试配置（等待时间配置）
POST http://localhost:8089/api/ui-test-config
Content-Type: application/json

{
  "configName": "调试等待时间配置",
  "configType": "WAIT_TIME",
  "defaultWaitTimeout": 20,
  "pageLoadTimeout": 45,
  "scriptTimeout": 45,
  "isDefault": false,
  "isActive": true
}

### 3. 创建UI测试配置（截图策略配置）
POST http://localhost:8089/api/ui-test-config
Content-Type: application/json

{
  "configName": "每步截图策略",
  "configType": "SCREENSHOT",
  "screenshotPolicy": "ALWAYS",
  "isDefault": false,
  "isActive": true
}

### 4. 创建UI测试配置（重试配置）
POST http://localhost:8089/api/ui-test-config
Content-Type: application/json

{
  "configName": "高可靠性重试配置",
  "configType": "RETRY",
  "retryCount": 3,
  "retryInterval": 10,
  "isDefault": false,
  "isActive": true
}

### 5. 获取UI测试配置列表（所有配置）
GET http://localhost:8089/api/ui-test-config
Accept: application/json

### 6. 获取UI测试配置列表（按配置类型筛选）
GET http://localhost:8089/api/ui-test-config?configType=BROWSER
Accept: application/json

### 7. 获取UI测试配置列表（按名称筛选）
GET http://localhost:8089/api/ui-test-config?configName=Chrome
Accept: application/json

### 8. 获取UI测试配置详情
GET http://localhost:8089/api/ui-test-config/1
Accept: application/json

### 9. 更新UI测试配置
PUT http://localhost:8089/api/ui-test-config/1
Content-Type: application/json

{
  "configName": "Chrome浏览器配置-更新版",
  "browserVersion": "95.0",
  "defaultWaitTimeout": 12,
  "pageLoadTimeout": 35,
  "scriptTimeout": 35,
  "headless": true,
  "isActive": true
}

### 10. 设置默认配置
PUT http://localhost:8089/api/ui-test-config/2/set-default
Accept: application/json

### 11. 获取默认配置
GET http://localhost:8089/api/ui-test-config/default?configType=BROWSER
Accept: application/json

### 12. 启用/禁用配置
PUT http://localhost:8089/api/ui-test-config/3/toggle-status?active=false
Accept: application/json

### 13. 获取配置类型统计
GET http://localhost:8089/api/ui-test-config/stats
Accept: application/json

### 14. 删除UI测试配置
DELETE http://localhost:8089/api/ui-test-config/4
Accept: application/json

### 15. 移动设备配置示例
POST http://localhost:8089/api/ui-test-config
Content-Type: application/json

{
  "configName": "Android移动设备配置",
  "configType": "BROWSER",
  "browserType": "CHROME",
  "browserVersion": "latest",
  "deviceType": "MOBILE",
  "deviceName": "Pixel 5",
  "platformName": "ANDROID",
  "platformVersion": "12.0",
  "defaultWaitTimeout": 15,
  "pageLoadTimeout": 30,
  "scriptTimeout": 30,
  "headless": false,
  "isDefault": false,
  "isActive": true
}

### 16. 高级浏览器配置（带代理和自定义功能）
POST http://localhost:8089/api/ui-test-config
Content-Type: application/json

{
  "configName": "高级Edge配置",
  "configType": "BROWSER",
  "browserType": "EDGE",
  "browserVersion": "latest",
  "deviceType": "DESKTOP",
  "platformName": "WINDOWS",
  "defaultWaitTimeout": 15,
  "pageLoadTimeout": 30,
  "scriptTimeout": 30,
  "headless": false,
  "proxySettings": "{\"server\": \"proxy.example.com\", \"port\": 8089, \"username\": \"user\", \"password\": \"pwd\"}",
  "capabilities": "{\"ms:edgeOptions\": {\"args\": [\"--start-maximized\", \"--disable-extensions\"]}}",
  "isDefault": false,
  "isActive": true
}

### --------------- 系统设置模块 API 测试 ---------------

### 系统用户管理 API 测试 

### 1. 分页查询用户列表
GET http://localhost:8089/api/sys/users?page=1&size=10
Content-Type: application/json

### 2. 条件查询用户列表
GET http://localhost:8089/api/sys/users?page=1&size=10&username=admin&phone=1380000&deptId=1&status=true
Content-Type: application/json

### 3. 获取用户详情
GET http://localhost:8089/api/sys/users/1
Content-Type: application/json

### 4. 创建用户
POST http://localhost:8089/api/sys/users
Content-Type: application/json

{
  "username": "testuser",
  "password": "Test123456",
  "realName": "测试用户",
  "nickname": "小测",
  "gender": "0",
  "email": "test@example.com",
  "phone": "13800138000",
  "avatar": "",
  "deptId": 1,
  "roleIds": [2, 3],
  "remark": "测试创建用户"
}

### 5. 更新用户
PUT http://localhost:8089/api/sys/users
Content-Type: application/json

{
  "id": 2,
  "realName": "测试用户更新",
  "nickname": "小测更新",
  "gender": "女",
  "email": "test_update@example.com",
  "phone": "13900139000",
  "avatar": "",
  "deptId": 2,
  "roleIds": [2],
  "remark": "测试更新用户"
}

### 6. 删除用户
DELETE http://localhost:8089/api/sys/users/2
Content-Type: application/json

### 7. 批量删除用户
DELETE http://localhost:8089/api/sys/users/batch
Content-Type: application/json

[3, 4, 5]

### 8. 修改用户状态
PUT http://localhost:8089/api/sys/users/2/status?status=false
Content-Type: application/json

### 9. 重置用户密码
PUT http://localhost:8089/api/sys/users/reset-password
Content-Type: application/json

{
  "userId": 2,
  "newPassword": "NewPass123"
}

### 10. 获取用户权限列表
GET http://localhost:8089/api/sys/users/2/permissions
Content-Type: application/json

### 11. 根据部门ID获取用户列表
GET http://localhost:8089/api/sys/users/dept/1
Content-Type: application/json

### 系统角色管理 API 测试

### 1. 分页查询角色列表
GET http://localhost:8089/api/sys/roles?page=1&size=10
Content-Type: application/json

### 2. 条件查询角色列表
GET http://localhost:8089/api/sys/roles?page=1&size=10&roleName=管理员&status=true
Content-Type: application/json

### 3. 获取所有角色列表
GET http://localhost:8089/api/sys/roles/all
Content-Type: application/json

### 4. 获取角色详情
GET http://localhost:8089/api/sys/roles/1
Content-Type: application/json

### 5. 创建角色
POST http://localhost:8089/api/sys/roles
Content-Type: application/json

{
  "roleName": "测试角色",
  "roleCode": "TEST_ROLE",
  "sort": 5,
  "isActive": true,
  "isSystem": false,
  "remark": "测试创建角色"
}

### 6. 更新角色
PUT http://localhost:8089/api/sys/roles
Content-Type: application/json

{
  "id": 3,
  "roleName": "测试角色更新",
  "roleCode": "TEST_ROLE_UPDATE",
  "sort": 6,
  "isActive": true,
  "isSystem": false,
  "remark": "测试更新角色"
}

### 7. 删除角色
DELETE http://localhost:8089/api/sys/roles/3
Content-Type: application/json

### 8. 批量删除角色
DELETE http://localhost:8089/api/sys/roles/batch
Content-Type: application/json

[4, 5]

### 9. 修改角色状态
PUT http://localhost:8089/api/sys/roles/3/status?status=false
Content-Type: application/json

### 10. 分配角色权限
POST http://localhost:8089/api/sys/roles/3/permissions
Content-Type: application/json

[1, 2, 3, 4, 5]

### 11. 获取角色权限ID列表
GET http://localhost:8089/api/sys/roles/3/permissions
Content-Type: application/json

### 12. 根据用户ID获取角色列表
GET http://localhost:8089/api/sys/roles/user/1
Content-Type: application/json

### 系统权限管理 API 测试

### 1. 获取所有权限列表
GET http://localhost:8089/api/sys/permissions
Content-Type: application/json

### 2. 根据权限类型获取权限列表
GET http://localhost:8089/api/sys/permissions/type/menu
Content-Type: application/json

### 3. 获取权限详情
GET http://localhost:8089/api/sys/permissions/1
Content-Type: application/json

### 4. 创建权限
POST http://localhost:8089/api/sys/permissions
Content-Type: application/json

{
  "permissionName": "测试权限",
  "permissionCode": "TEST:PERMISSION",
  "permissionType": "button",
  "parentId": 1,
  "path": "",
  "component": "",
  "icon": "",
  "sort": 5,
  "isActive": true,
  "isSystem": false,
  "remark": "测试创建权限"
}

### 5. 更新权限
PUT http://localhost:8089/api/sys/permissions
Content-Type: application/json

{
  "id": 4,
  "permissionName": "测试权限更新",
  "permissionCode": "TEST:PERMISSION:UPDATE",
  "permissionType": "button",
  "parentId": 1,
  "path": "",
  "component": "",
  "icon": "edit",
  "sort": 6,
  "isActive": true,
  "isSystem": false,
  "remark": "测试更新权限"
}

### 6. 删除权限
DELETE http://localhost:8089/api/sys/permissions/4
Content-Type: application/json

### 7. 根据父ID获取权限列表
GET http://localhost:8089/api/sys/permissions/parent/1
Content-Type: application/json

### 8. 根据角色ID获取权限列表
GET http://localhost:8089/api/sys/permissions/role/1
Content-Type: application/json

### 9. 根据用户ID获取权限列表
GET http://localhost:8089/api/sys/permissions/user/1
Content-Type: application/json

### 10. 获取菜单权限列表
GET http://localhost:8089/api/sys/permissions/menus
Content-Type: application/json

### 11. 根据用户ID获取菜单权限列表
GET http://localhost:8089/api/sys/permissions/menus/user/1
Content-Type: application/json

### 系统部门管理 API 测试

### 1. 获取所有部门列表
GET http://localhost:8089/api/sys/depts
Content-Type: application/json

### 2. 获取部门详情
GET http://localhost:8089/api/sys/depts/1
Content-Type: application/json

### 3. 创建部门
POST http://localhost:8089/api/sys/depts
Content-Type: application/json

{
  "deptName": "测试部门",
  "deptCode": "TEST_DEPT",
  "parentId": 1,
  "leader": "测试领导",
  "phone": "13800138000",
  "email": "test@example.com",
  "sort": 5,
  "isActive": true,
  "remark": "测试创建部门"
}

### 4. 更新部门
PUT http://localhost:8089/api/sys/depts
Content-Type: application/json

{
  "id": 3,
  "deptName": "测试部门更新",
  "deptCode": "TEST_DEPT_UPDATE",
  "parentId": 1,
  "leader": "测试领导更新",
  "phone": "13900139000",
  "email": "test_update@example.com",
  "sort": 6,
  "isActive": true,
  "remark": "测试更新部门"
}

### 5. 删除部门
DELETE http://localhost:8089/api/sys/depts/3
Content-Type: application/json

### 6. 修改部门状态
PUT http://localhost:8089/api/sys/depts/3/status?status=false
Content-Type: application/json

### 7. 根据父ID获取部门列表
GET http://localhost:8089/api/sys/depts/parent/1
Content-Type: application/json

### 8. 根据用户ID获取部门列表
GET http://localhost:8089/api/sys/depts/user/1
Content-Type: application/json

### 9. 查询部门及其下级部门ID列表
GET http://localhost:8089/api/sys/depts/1/children/ids
Content-Type: application/json

### 10. 查询用户的主部门
GET http://localhost:8089/api/sys/depts/user/1/primary
Content-Type: application/json

### 系统配置相关API测试

### 获取系统配置分页列表
GET http://localhost:8089/api/sys/configs?page=1&size=10
Accept: application/json

### 根据ID获取系统配置详情
GET http://localhost:8089/api/sys/configs/1
Accept: application/json

### 根据配置键名获取配置
GET http://localhost:8089/api/sys/configs/key/sys.name
Accept: application/json

### 根据配置键名获取配置值
GET http://localhost:8089/api/sys/configs/value/sys.name
Accept: application/json

### 获取多个配置键值对
POST http://localhost:8089/api/sys/configs/values
Content-Type: application/json
Accept: application/json

[
  "sys.name",
  "sys.version",
  "sys.index.path"
]

### 创建系统配置
POST http://localhost:8089/api/sys/configs
Content-Type: application/json
Accept: application/json

{
  "configName": "测试配置",
  "configKey": "test.config",
  "configValue": "test value",
  "configType": "text",
  "isSystem": false,
  "status": true,
  "remark": "测试用配置"
}

### 更新系统配置
PUT http://localhost:8089/api/sys/configs
Content-Type: application/json
Accept: application/json

{
  "id": 1,
  "configName": "系统名称",
  "configKey": "sys.name",
  "configValue": "VerityX测试平台V2",
  "configType": "text",
  "status": true,
  "remark": "系统名称，显示在页面顶部"
}

### 批量更新系统配置
PUT http://localhost:8089/api/sys/configs/batch
Content-Type: application/json
Accept: application/json

[
  {
    "id": 1,
    "configName": "系统名称",
    "configKey": "sys.name",
    "configValue": "VerityX测试平台",
    "configType": "text",
    "status": true,
    "remark": "系统名称，显示在页面顶部"
  },
  {
    "id": 2,
    "configName": "系统版本",
    "configKey": "sys.version",
    "configValue": "1.0.1",
    "configType": "text",
    "status": true,
    "remark": "系统版本号"
  }
]

### 删除系统配置
DELETE http://localhost:8089/api/sys/configs/15
Accept: application/json

### 批量删除系统配置
DELETE http://localhost:8089/api/sys/configs/batch
Content-Type: application/json
Accept: application/json

[15, 16, 17]

### 刷新系统配置缓存
POST http://localhost:8089/api/sys/configs/refresh
Accept: application/json

### 字典类型相关API测试

### 获取字典类型分页列表
GET http://localhost:8089/api/sys/dict/types?page=1&size=10
Accept: application/json

### 获取所有字典类型列表
GET http://localhost:8089/api/sys/dict/types/all
Accept: application/json

### 根据ID获取字典类型详情
GET http://localhost:8089/api/sys/dict/types/1
Accept: application/json

### 创建字典类型
POST http://localhost:8089/api/sys/dict/types
Content-Type: application/json
Accept: application/json

{
  "dictName": "测试字典",
  "dictType": "test_dict",
  "status": true,
  "remark": "测试用字典"
}

### 更新字典类型
PUT http://localhost:8089/api/sys/dict/types
Content-Type: application/json
Accept: application/json

{
  "id": 8,
  "dictName": "测试字典更新",
  "dictType": "test_dict",
  "status": true,
  "remark": "测试用字典已更新"
}

### 删除字典类型
DELETE http://localhost:8089/api/sys/dict/types/8
Accept: application/json

### 字典数据相关API测试

### 获取字典数据分页列表
GET http://localhost:8089/api/sys/dict/data?page=1&size=10&dictType=sys_yes_no
Accept: application/json

### 根据字典类型获取字典数据列表
GET http://localhost:8089/api/sys/dict/data/type/sys_yes_no
Accept: application/json

### 根据ID获取字典数据详情
GET http://localhost:8089/api/sys/dict/data/1
Accept: application/json

### 创建字典数据
POST http://localhost:8089/api/sys/dict/data
Content-Type: application/json
Accept: application/json

{
  "dictType": "test_dict",
  "dictLabel": "测试标签",
  "dictValue": "test",
  "dictSort": 1,
  "isDefault": true,
  "status": true,
  "remark": "测试用字典数据"
}

### 更新字典数据
PUT http://localhost:8089/api/sys/dict/data
Content-Type: application/json
Accept: application/json

{
  "id": 30,
  "dictType": "test_dict",
  "dictLabel": "测试标签更新",
  "dictValue": "test",
  "dictSort": 2,
  "isDefault": true,
  "status": true,
  "remark": "测试用字典数据已更新"
}

### 删除字典数据
DELETE http://localhost:8089/api/sys/dict/data/30
Accept: application/json

### 通知中心相关API测试

### 通知模板管理 API 测试

### 1. 分页查询通知模板列表
GET http://localhost:8089/api/sys/notification-templates?page=1&size=10
Accept: application/json

### 2. 条件查询通知模板列表
GET http://localhost:8089/api/sys/notification-templates?page=1&size=10&name=测试&code=TEST&type=EMAIL&status=true
Accept: application/json

### 3. 获取通知模板详情
GET http://localhost:8089/api/sys/notification-templates/1
Accept: application/json

### 4. 根据编码获取通知模板
GET http://localhost:8089/api/sys/notification-templates/code/TEST_EMAIL_01
Accept: application/json

### 5. 创建通知模板
POST http://localhost:8089/api/sys/notification-templates
Content-Type: application/json

{
  "name": "测试计划创建通知",
  "code": "TEST_PLAN_CREATE",
  "type": "EMAIL",
  "title": "新测试计划已创建",
  "content": "您好 {userName}，\n\n新的测试计划 {testPlanName} 已创建。\n\n详情请查看：{testPlanUrl}",
  "params": "{\"userName\":\"用户名\",\"testPlanName\":\"测试计划名称\",\"testPlanUrl\":\"测试计划链接\"}",
  "status": true
}

### 6. 更新通知模板
PUT http://localhost:8089/api/sys/notification-templates
Content-Type: application/json

{
  "id": 1,
  "name": "测试计划创建通知-更新",
  "code": "TEST_PLAN_CREATE",
  "type": "EMAIL",
  "title": "新测试计划已创建（更新）",
  "content": "您好 {userName}，\n\n新的测试计划 {testPlanName} 已创建。\n\n详情请查看：{testPlanUrl}\n\n祝好，\nVerityX团队",
  "params": "{\"userName\":\"用户名\",\"testPlanName\":\"测试计划名称\",\"testPlanUrl\":\"测试计划链接\"}",
  "status": true,
  "createTime": "2023-11-20 14:30:00"
}

### 7. 删除通知模板
DELETE http://localhost:8089/api/sys/notification-templates/2
Accept: application/json

### 8. 批量删除通知模板
POST http://localhost:8089/api/sys/notification-templates/batch
Content-Type: application/json

[3, 4, 5]

### 9. 修改通知模板状态
PUT http://localhost:8089/api/sys/notification-templates/1/status?status=false
Accept: application/json

### 通知规则管理 API 测试

### 1. 分页查询通知规则列表
GET http://localhost:8089/api/sys/notification-rules?page=1&size=10
Accept: application/json

### 2. 条件查询通知规则列表
GET http://localhost:8089/api/sys/notification-rules?page=1&size=10&name=测试&code=TEST&eventType=TEST_PLAN&eventAction=CREATE&status=true
Accept: application/json

### 3. 获取通知规则详情
GET http://localhost:8089/api/sys/notification-rules/1
Accept: application/json

### 4. 根据编码获取通知规则
GET http://localhost:8089/api/sys/notification-rules/code/TEST_PLAN_CREATE_RULE
Accept: application/json

### 5. 根据事件类型和事件动作获取规则列表
GET http://localhost:8089/api/sys/notification-rules/event?eventType=TEST_PLAN&eventAction=CREATE
Accept: application/json

### 6. 创建通知规则
POST http://localhost:8089/api/sys/notification-rules
Content-Type: application/json

{
  "name": "测试计划创建通知规则",
  "code": "TEST_PLAN_CREATE_RULE",
  "eventType": "TEST_PLAN",
  "eventAction": "CREATE",
  "templateId": 1,
  "notifyType": "EMAIL",
  "status": true
}

### 7. 更新通知规则
PUT http://localhost:8089/api/sys/notification-rules
Content-Type: application/json

{
  "id": 1,
  "name": "测试计划创建通知规则-更新",
  "code": "TEST_PLAN_CREATE_RULE",
  "eventType": "TEST_PLAN",
  "eventAction": "CREATE",
  "templateId": 1,
  "notifyType": "EMAIL",
  "status": true
}

### 8. 删除通知规则
DELETE http://localhost:8089/api/sys/notification-rules/2
Accept: application/json

### 9. 批量删除通知规则
POST http://localhost:8089/api/sys/notification-rules/batch
Content-Type: application/json

[3, 4, 5]

### 10. 修改通知规则状态
PUT http://localhost:8089/api/sys/notification-rules/1/status?status=false
Accept: application/json

### 用户订阅管理 API 测试

### 1. 分页查询用户订阅列表
GET http://localhost:8089/api/sys/user-subscriptions?page=1&size=10
Accept: application/json

### 2. 条件查询用户订阅列表
GET http://localhost:8089/api/sys/user-subscriptions?page=1&size=10&userId=1&ruleId=1&status=true
Accept: application/json

### 3. 获取用户订阅详情
GET http://localhost:8089/api/sys/user-subscriptions/1
Accept: application/json

### 4. 根据用户ID获取订阅列表
GET http://localhost:8089/api/sys/user-subscriptions/user/1
Accept: application/json

### 5. 根据规则ID获取用户订阅列表
GET http://localhost:8089/api/sys/user-subscriptions/rule/1
Accept: application/json

### 6. 创建用户订阅
POST http://localhost:8089/api/sys/user-subscriptions
Content-Type: application/json

{
  "userId": 1,
  "ruleId": 1,
  "notifyType": "EMAIL",
  "status": true
}

### 7. 更新用户订阅
PUT http://localhost:8089/api/sys/user-subscriptions
Content-Type: application/json

{
  "id": 1,
  "userId": 1,
  "ruleId": 1,
  "notifyType": "EMAIL",
  "status": true
}

### 8. 删除用户订阅
DELETE http://localhost:8089/api/sys/user-subscriptions/2
Accept: application/json

### 9. 批量删除用户订阅
POST http://localhost:8089/api/sys/user-subscriptions/batch
Content-Type: application/json

[3, 4, 5]

### 10. 修改用户订阅状态
PUT http://localhost:8089/api/sys/user-subscriptions/1/status?status=false
Accept: application/json

### 部门订阅管理 API 测试

### 1. 分页查询部门订阅列表
GET http://localhost:8089/api/sys/dept-subscriptions?page=1&size=10
Accept: application/json

### 2. 条件查询部门订阅列表
GET http://localhost:8089/api/sys/dept-subscriptions?page=1&size=10&deptId=1&ruleId=1&status=true
Accept: application/json

### 3. 获取部门订阅详情
GET http://localhost:8089/api/sys/dept-subscriptions/1
Accept: application/json

### 4. 根据部门ID获取订阅列表
GET http://localhost:8089/api/sys/dept-subscriptions/dept/1
Accept: application/json

### 5. 根据规则ID获取部门订阅列表
GET http://localhost:8089/api/sys/dept-subscriptions/rule/1
Accept: application/json

### 6. 创建部门订阅
POST http://localhost:8089/api/sys/dept-subscriptions
Content-Type: application/json

{
  "deptId": 1,
  "ruleId": 1,
  "notifyType": "EMAIL",
  "status": true
}

### 7. 更新部门订阅
PUT http://localhost:8089/api/sys/dept-subscriptions
Content-Type: application/json

{
  "id": 1,
  "deptId": 1,
  "ruleId": 1,
  "notifyType": "EMAIL",
  "status": true
}

### 8. 删除部门订阅
DELETE http://localhost:8089/api/sys/dept-subscriptions/2
Accept: application/json

### 9. 批量删除部门订阅
POST http://localhost:8089/api/sys/dept-subscriptions/batch
Content-Type: application/json

[3, 4, 5]

### 10. 修改部门订阅状态
PUT http://localhost:8089/api/sys/dept-subscriptions/1/status?status=false
Accept: application/json 