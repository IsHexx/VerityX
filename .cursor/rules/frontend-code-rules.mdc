---
description: 
globs: 
alwaysApply: false
---
# 前端代码编写规范

## 代码风格规范

### JavaScript/TypeScript风格
- 使用2个空格进行缩进
- 使用分号结束语句
- 字符串优先使用单引号
- 优先使用箭头函数表达式
- 使用`const`和`let`，避免使用`var`
- 使用模板字符串代替字符串拼接

```javascript
// 推荐
const fullName = `${firstName} ${lastName}`;

// 不推荐
const fullName = firstName + ' ' + lastName;
```

### Vue组件规范
- 组件名使用多个单词，避免与HTML元素冲突
- 组件属性使用小驼峰命名法
- 模板中的属性使用kebab-case命名法
- 组件结构遵循template -> script -> style顺序
- 使用scoped CSS或CSS模块避免样式污染

```vue
<template>
  <div class="login-form">
    <input v-model="username" type="text" placeholder="用户名" />
    <input v-model="password" type="password" placeholder="密码" />
    <button @click="handleLogin">登录</button>
  </div>
</template>

<script>
export default {
  name: 'LoginForm',
  data() {
    return {
      username: '',
      password: ''
    };
  },
  methods: {
    handleLogin() {
      // 登录逻辑
    }
  }
};
</script>

<style scoped>
.login-form {
  margin: 20px;
  padding: 15px;
}
</style>
```

### 代码分割
- 避免大段代码块，保持函数的简短和聚焦
- 一个函数应该只做一件事
- 函数长度一般不超过30行，复杂函数应拆分为多个小函数
- 相关功能应组织在一起，使用模块化结构
- 保持代码的DRY(Don't Repeat Yourself)原则
- 避免硬编码值，使用常量或配置
- Vue组件不应过大，超过300行考虑拆分

## 命名规范

1. **组件命名**：
   - 使用PascalCase（大驼峰）命名法
   - 多个单词组成，避免缩写
   - 例如：`LoginForm.vue`、`UserProfile.vue`、`ApiTestReport.vue`

2. **变量命名**：
   - 使用camelCase（小驼峰）命名法
   - 布尔类型变量使用`is`、`has`、`can`等前缀
   - 例如：`userName`、`isLoading`、`hasPermission`

3. **方法命名**：
   - 使用camelCase（小驼峰）命名法
   - 动词开头，表明操作
   - 事件处理方法以`handle`开头
   - 数据获取方法可以使用`fetch`、`get`、`load`等前缀
   - 例如：`handleSubmit`、`fetchData`、`loadUserProfile`

4. **常量命名**：
   - 使用全大写，单词间用下划线分隔
   - 例如：`API_URL`、`MAX_RETRY_COUNT`

5. **CSS类命名**：
   - 使用kebab-case（短横线）命名法
   - 组件范围内使用组件名作为前缀
   - 例如：`user-profile-container`、`login-form-button`

6. **文件命名**：
   - Vue组件文件使用PascalCase命名
   - 通用工具类文件使用camelCase命名
   - API服务文件使用service或api后缀
   - 例如：`ApiTestReport.vue`、`dateUtils.js`、`userService.js`

## 页面开发规范

### 页面结构参考
编写新页面时，参考以下现有页面的实现和代码风格：
- [ApiTestReport.vue](mdc:front/src/views/ApiTest/ApiTestReport.vue) - API测试报告页面
- [UiTestCasePage.vue](mdc:front/src/views/UiTest/UiTestCasePage.vue) - UI测试用例页面
- [ApiAutoTestPage.vue](mdc:front/src/views/ApiTest/ApiAutoTestPage.vue) - API自动化测试页面
- [ApiEnvironmentPage.vue](mdc:front/src/views/ApiTest/ApiEnvironmentPage.vue) - API环境配置页面

### 核心方法实现

1. **数据加载方法**：
   - 使用异步方法(async/await)实现数据获取
   - 提供默认参数，包括分页、关键词搜索等
   - 根据Tab状态确定不同的查询参数
   - 实现清晰的日志记录
   - 示例：
   ```javascript
   const loadData = async (tabName = activeTab.value, page = pagination.page, pageSize = pagination.pageSize, keyword = searchKeyword.value) => {
     loading.value = true;
     try {
       // 根据tab名称确定status值
       let status = null;
       if (tabName === 'specific_tab') {
         console.log("加载特定数据");
         status = 'specific_status';
       } else {
         console.log("加载全部数据");
       }

       // 构造请求参数
       const params = { page, pageSize };
       if (keyword) params.keyword = keyword;
       if (status) params.status = status;

       console.log("请求参数:", params);
       
       const res = await ApiService.getData(params);
       // 处理响应数据
     } catch (error) {
       ElMessage.error("获取数据失败");
       console.error("获取数据失败:", error);
     } finally {
       loading.value = false;
     }
   };
   ```

2. **Tab切换处理**：
   ```javascript
   const handleTabClick = (tab) => {
     console.log("Tab切换, 新的tab值:", tab.props.name);
     pagination.page = 1;
     pagination.pageSize = 10;
     loadData(tab.props.name);
   };
   ```

### 表格与分页组件使用

1. **表格实现**：
   - 使用el-table组件
   - 添加适当的loading状态
   - 使用合适的min-width确保表格响应式
   - 实现自定义样式使表格美观

2. **分页实现**：
   - 使用PaginationPage组件
   - 通过事件处理分页变化
   - 在分页变化时重新加载数据

### 表单与对话框

1. **表单实现**：
   - 使用el-form组件
   - 添加必要的表单验证
   - 使用reactive定义表单数据

2. **对话框实现**：
   - 使用el-dialog组件
   - 提供清晰的标题和操作按钮
   - 实现表单重置功能

### UI样式规范

1. **标签样式**：
   - 使用el-tag组件
   - 根据不同状态显示不同颜色
   - 使用映射函数确定标签类型
   ```javascript
   const getStatusTagType = (status) => {
     const statusMap = {
       "成功": "success",
       "失败": "danger",
       "进行中": "warning"
     };
     return statusMap[status] || "";
   };
   ```

2. **按钮样式**：
   - 主要操作使用主要按钮(type="primary")
   - 删除等危险操作使用确认弹窗
   - 表格内操作使用链接按钮(link)

### 代码组织

1. **导入顺序**：
   - Vue核心库
   - 第三方组件库
   - 自定义组件
   - API服务
   - 图标资源

2. **响应式数据定义**：
   - 使用ref和reactive定义响应式数据
   - 将相关数据分组组织

3. **方法组织**：
   - 核心方法放在前面
   - 事件处理方法使用handle前缀
   - 辅助方法放在后面

4. **生命周期钩子**：
   - 在onMounted中初始化数据

## 组件开发规范

1. **组件命名**：
   - 使用PascalCase命名
   - 功能型组件使用动词前缀(如FetchData)
   - 展示型组件使用名词(如UserProfile)

2. **组件通信**：
   - 使用props传递数据给子组件
   - 使用emit向父组件发送事件
   - 复杂状态使用store管理

3. **可重用组件**：
   - 放置在components目录下
   - 提供清晰的props定义
   - 添加必要的文档注释





