---
description: 
globs: 
alwaysApply: false
---
# VerityX 架构与设计模式规范

## 系统整体架构

### 架构概述
VerityX 是一个自动化测试平台，采用前后端分离架构：
- **前端**：基于 Vue.js 的单页面应用(SPA)
- **后端**：基于 Spring Boot 的 RESTful API 服务
- **数据库**：MySQL 关系型数据库

### 技术栈
- **前端**：Vue.js + Element Plus + Axios
- **后端**：Spring Boot + MyBatis + MySQL
- **构建工具**：Maven (后端), npm (前端)

## 前端架构

### 目录结构
前端项目位于 `front` 目录，主要结构如下：
```
front/
  ├── public/              # 静态资源
  ├── src/                 # 源代码
  │   ├── api/             # API 接口定义
  │   ├── assets/          # 资源文件(图片、样式等)
  │   ├── components/      # 可复用组件
  │   ├── router/          # 路由配置
  │   ├── store/           # Vuex 状态管理
  │   ├── utils/           # 工具函数
  │   └── views/           # 页面组件
  ├── package.json         # 项目依赖
  └── vue.config.js        # Vue 配置
```

### 核心模块
1. **API 模块**：
   - 位于 `src/api` 目录
   - 每个服务对应一个 API 文件，如 `uiTestCaseService.js`、`apiTestReportService.js`
   - 使用 Axios 进行 HTTP 请求
   - 封装 RESTful API 调用

2. **状态管理**：
   - 使用 Vuex 管理全局状态
   - 状态按功能模块分离
   - 用户信息、全局配置等存储在 Vuex 中

3. **路由管理**：
   - 使用 Vue Router 管理路由
   - 路由配置位于 `src/router` 目录
   - 支持路由懒加载提高性能

4. **组件系统**：
   - 通用组件位于 `src/components` 目录
   - 页面组件位于 `src/views` 目录
   - 采用组合式 API (Composition API) 开发组件

## 后端架构

### 目录结构
后端项目位于 `verityx` 目录，主要结构如下：
```
verityx/
  ├── src/
  │   ├── main/
  │   │   ├── java/
  │   │   │   └── com/example/verityx/
  │   │   │       ├── config/           # 配置类
  │   │   │       ├── controller/       # 控制器
  │   │   │       ├── dto/              # 数据传输对象
  │   │   │       ├── entity/           # 实体类
  │   │   │       ├── mapper/           # MyBatis映射器
  │   │   │       ├── service/          # 服务接口
  │   │   │       │   └── impl/         # 服务实现
  │   │   │       └── util/             # 工具类
  │   │   └── resources/
  │   │       ├── mapper/               # MyBatis XML映射文件
  │   │       └── application.properties # 应用配置
  │   └── test/                         # 测试代码
  └── pom.xml                           # Maven配置
```

### 核心模块
1. **控制器层**：
   - 处理 HTTP 请求
   - 定义 RESTful API 端点
   - 参数验证和响应封装
   - 例如：`UiTestCaseController`、`ApiTestReportController`

2. **服务层**：
   - 实现业务逻辑
   - 事务管理
   - 例如：`UiTestCaseService`、`ApiTestReportService`

3. **数据访问层**：
   - MyBatis Mapper 接口
   - XML映射文件
   - 例如：`UiTestCaseMapper`、`ApiTestReportMapper`

4. **实体层**：
   - JPA实体对象，对应数据库表
   - 数据传输对象(DTO)，用于API交互
   - 例如：`UiTestCase`、`ApiTestReport`

## 前后端交互

### API通信规范
1. **请求格式**：
   - 请求URL采用RESTful风格
   - GET请求使用URL参数
   - POST/PUT请求使用JSON格式请求体
   - 请求头包含Content-Type: application/json

2. **响应格式**：
   - 统一使用JSON格式
   - 标准响应结构：
   ```json
   {
     "code": 200,           // 状态码
     "message": "success",  // 状态消息
     "data": {              // 响应数据
       // 具体数据结构
     }
   }
   ```

3. **状态码规范**：
   - 200: 成功
   - 400: 请求参数错误
   - 401: 未授权
   - 403: 禁止访问
   - 404: 资源不存在
   - 500: 服务器内部错误

### 前端API调用示例
```javascript
// 前端API服务示例 (uiTestCaseService.js)
import http from '@/utils/http';

export const UiTestCaseApi = {
  // 获取UI测试用例列表
  getUiTestCaseList: (params) => {
    // 构造干净的查询参数对象
    const cleanParams = {
      page: params.page || 1, // 默认值为 1
      pageSize: params.pageSize || 10, // 默认值为 10
    };
  
    // 仅在有值时添加其他参数
    if (params.keyword) {
      cleanParams.keyword = params.keyword;
    }
  
    if (params.status) {
      cleanParams.status = params.status;
    }
  
    return http.get('/api/uitestcases/list', cleanParams);
  },
  
  // 获取UI测试用例详情
  getUiTestCaseDetail: (id) => {
    return http.get(`/api/uitestcases/${id}`);
  },
  
  // 创建UI测试用例
  createUiTestCase: (data) => {
    return http.post('/api/uitestcases/create', data);
  },
  
  // 更新UI测试用例
  updateUiTestCase: (id, data) => {
    return http.put(`/api/uitestcases/update/${id}`, data);
  },
  
  // 删除UI测试用例
  deleteUiTestCase: (id) => {
    return http.delete(`/api/uitestcases/delete/${id}`);
  },
  
  // 执行UI测试用例
  executeUiTestCase: (id) => {
    return http.post(`/api/uitestcases/execute/${id}`);
  }
};
```

### 页面组件中调用API示例
```javascript
// 在页面组件中调用API的示例 (UiTestCasePage.vue)
import { UiTestCaseApi } from '@/api/uiTestCaseService';
import { ref, reactive } from 'vue';
import { ElMessage } from 'element-plus';

// 状态管理
const loading = ref(false);
const uiTestCaseData = ref([]);
const total = ref(0);

// 分页
const pagination = reactive({
  page: 1,
  pageSize: 10,
});

// 加载测试用例数据的核心方法
const loadTestCaseData = async (tabName, page = pagination.page, pageSize = pagination.pageSize, keyword = '') => {
  loading.value = true;
  try {
    // 根据tab名称确定status值
    let status = null;
    if (tabName === 'executed') {
      console.log("加载已执行用例数据");
      status = 'executed';
    } else if (tabName === 'unexecuted') {
      console.log("加载未执行用例数据");
      status = 'unexecuted';
    } else {
      console.log("加载全部用例数据");
    }
    
    // 构造请求参数
    const params = { page, pageSize };
    if (keyword) params.keyword = keyword;
    if (status) params.status = status;
    
    console.log("请求参数:", params);
    
    const res = await UiTestCaseApi.getUiTestCaseList(params);
    if (res.code === 200) {
      uiTestCaseData.value = res.data.list;
      total.value = res.data.total;
    } else {
      ElMessage.error(res.message || '获取测试用例列表失败');
    }
  } catch (error) {
    ElMessage.error("获取测试用例列表失败");
    console.error("获取测试用例列表失败:", error);
  } finally {
    loading.value = false;
  }
};
```

### 后端API实现示例
```java
// 后端控制器示例 (UiTestCaseController.java)
@RestController
@RequestMapping("/api/ui-test-cases")
public class UiTestCaseController {
    
    @Autowired
    private UiTestCaseService uiTestCaseService;
    
    // 获取UI测试用例列表
    @GetMapping
    public Result<PageResult<UiTestCaseDTO>> getUiTestCaseList(
            @RequestParam(value = "page", defaultValue = "1") Integer page,
            @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize,
            @RequestParam(value = "keyword", required = false) String keyword,
            @RequestParam(value = "status", required = false) String status) {
        
        PageResult<UiTestCaseDTO> result = uiTestCaseService.getUiTestCaseList(page, pageSize, keyword, status);
        return Result.success(result);
    }
    
    // 获取UI测试用例详情
    @GetMapping("/{id}")
    public Result<UiTestCaseDTO> getUiTestCaseDetail(@PathVariable("id") Long id) {
        UiTestCaseDTO uiTestCase = uiTestCaseService.getUiTestCaseById(id);
        return Result.success(uiTestCase);
    }
    
    // 创建UI测试用例
    @PostMapping
    public Result<Long> createUiTestCase(@RequestBody @Valid UiTestCaseCreateRequest request) {
        Long id = uiTestCaseService.createUiTestCase(request);
        return Result.success(id);
    }
    
    // 更新UI测试用例
    @PutMapping("/{id}")
    public Result<Void> updateUiTestCase(@PathVariable("id") Long id, @RequestBody @Valid UiTestCaseUpdateRequest request) {
        uiTestCaseService.updateUiTestCase(id, request);
        return Result.success();
    }
    
    // 删除UI测试用例
    @DeleteMapping("/{id}")
    public Result<Void> deleteUiTestCase(@PathVariable("id") Long id) {
        uiTestCaseService.deleteUiTestCase(id);
        return Result.success();
    }
    
    // 执行UI测试用例
    @PostMapping("/{id}/execute")
    public Result<Void> executeUiTestCase(@PathVariable("id") Long id) {
        uiTestCaseService.executeUiTestCase(id);
        return Result.success();
    }
}
```

### 数据传输对象示例
```java
// DTO示例 (UiTestCaseDTO.java)
public class UiTestCaseDTO {
    private Long id;
    private String caseTitle;
    private String importanceLevel;
    private String caseStatus;
    private String lastResult;
    private String createdBy;
    private Date createdAt;
    private Date lastRunAt;
    private Integer stepCount;
    // getters and setters
}

// 创建请求示例 (UiTestCaseCreateRequest.java)
public class UiTestCaseCreateRequest {
    @NotBlank(message = "用例标题不能为空")
    private String caseTitle;
    
    private String importanceLevel;
    private String environment;
    private String precondition;
    private String description;
    // getters and setters
}
```

## 认证与授权

### 认证机制
- 使用基于Token的认证机制
- 登录成功后，服务端返回JWT Token
- 前端存储Token到localStorage
- 每次请求携带Token在Authorization请求头

### 请求拦截器
```javascript
// 前端请求拦截器 (request.js)
import axios from 'axios';
import store from '@/store';
import { ElMessage } from 'element-plus';

const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API,
  timeout: 5000
});

// 请求拦截器
service.interceptors.request.use(
  config => {
    // 添加token到请求头
    if (store.getters.token) {
      config.headers['Authorization'] = `Bearer ${store.getters.token}`;
    }
    return config;
  },
  error => {
    console.log(error);
    return Promise.reject(error);
  }
);

// 响应拦截器
service.interceptors.response.use(
  response => {
    const res = response.data;
    // 请求成功但业务状态码不是200
    if (res.code !== 200) {
      ElMessage.error(res.message || '请求失败');
      
      // 未授权，跳转登录页
      if (res.code === 401) {
        store.dispatch('user/resetToken').then(() => {
          location.reload();
        });
      }
      return Promise.reject(new Error(res.message || '请求失败'));
    } else {
      return res;
    }
  },
  error => {
    console.log('请求错误: ' + error);
    ElMessage.error(error.message || '请求失败');
    return Promise.reject(error);
  }
);

export default service;
```

## 错误处理

### 前端错误处理
- 请求错误统一由axios响应拦截器处理
- 业务逻辑错误在具体业务代码中处理
- 全局异常使用Vue的errorHandler处理

### 后端错误处理
- 使用全局异常处理器(@RestControllerAdvice)捕获异常
- 封装统一的错误响应格式
- 针对不同类型的异常返回不同的状态码和消息

```java
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(ResourceNotFoundException.class)
    public Result<Void> handleResourceNotFoundException(ResourceNotFoundException e) {
        return Result.fail(404, e.getMessage());
    }
    
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Result<Void> handleValidationException(MethodArgumentNotValidException e) {
        String message = e.getBindingResult().getFieldErrors().stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.joining(", "));
        return Result.fail(400, message);
    }
    
    @ExceptionHandler(Exception.class)
    public Result<Void> handleException(Exception e) {
        log.error("系统异常", e);
        return Result.fail(500, "系统错误，请联系管理员");
    }
}
```

## API文档

### Swagger配置
- 使用Swagger/OpenAPI生成API文档
- 所有接口都必须有详细的文档注释
- API文档访问地址：[http://localhost:8080/swagger-ui/index.html](mdc:http:/localhost:8080/swagger-ui/index.html)

### 文档示例
```java
@Tag(name = "UI测试用例管理", description = "UI测试用例的增删改查接口")
@RestController
@RequestMapping("/api/ui-test-cases")
public class UiTestCaseController {
    
    @Operation(summary = "分页查询UI测试用例", description = "根据关键字、状态和分页参数查询UI测试用例")
    @GetMapping
    public Result<PageResult<UiTestCaseDTO>> getUiTestCaseList(
            @Parameter(description = "页码") @RequestParam(value = "page", defaultValue = "1") Integer page,
            @Parameter(description = "每页大小") @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize,
            @Parameter(description = "搜索关键词") @RequestParam(value = "keyword", required = false) String keyword,
            @Parameter(description = "用例状态") @RequestParam(value = "status", required = false) String status) {
        // 实现代码
    }
}
```

## 设计模式应用

### 后端设计模式

#### 单例模式(Singleton)
- Spring容器管理的Bean默认是单例的
- 确保全局只有一个实例，避免重复创建对象

```java
@Service
public class UserLoginServiceImpl implements UserLoginService {
    // Spring容器会确保这是单例
}
```

#### 工厂模式(Factory)
- 用于创建对象而不暴露创建逻辑
- Spring的Bean工厂是典型应用

```java
@Configuration
public class AppConfig {
    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

#### 策略模式(Strategy)
- 用于实现算法的动态选择
- 例如不同类型的通知可以有不同的发送策略

```java
public interface NotificationStrategy {
    void send(String message, String recipient);
}

@Service
public class EmailNotificationStrategy implements NotificationStrategy {
    @Override
    public void send(String message, String recipient) {
        // 发送邮件
    }
}

@Service
public class SMSNotificationStrategy implements NotificationStrategy {
    @Override
    public void send(String message, String recipient) {
        // 发送短信
    }
}
```

#### 观察者模式(Observer)
- 用于事件通知，当对象状态改变时通知依赖对象
- Spring的事件机制是典型应用

```java
@Component
public class UserEventPublisher {
    private final ApplicationEventPublisher publisher;

    public UserEventPublisher(ApplicationEventPublisher publisher) {
        this.publisher = publisher;
    }

    public void publishUserCreatedEvent(UserLogin user) {
        publisher.publishEvent(new UserCreatedEvent(this, user));
    }
}

@Component
public class UserEventListener {
    @EventListener
    public void handleUserCreatedEvent(UserCreatedEvent event) {
        // 处理用户创建事件
    }
}
```

### 前端设计模式

#### 组件模式(Component)
- Vue.js本身基于组件化设计
- 每个UI元素封装为可复用组件

```javascript
// 按钮组件
Vue.component('custom-button', {
  props: ['text', 'type'],
  template: '<button :class="type">{{ text }}</button>'
});
```

#### 状态管理模式(State Management)
- 使用Vuex集中管理应用状态
- 遵循单向数据流

```javascript
// Vuex store
export default new Vuex.Store({
  state: {
    user: null,
    isAuthenticated: false
  },
  mutations: {
    setUser(state, user) {
      state.user = user;
      state.isAuthenticated = !!user;
    }
  },
  actions: {
    login({ commit }, credentials) {
      // 调用登录API
      return api.login(credentials)
        .then(user => {
          commit('setUser', user);
          return user;
        });
    }
  }
});
```

## 架构最佳实践

### 关注点分离(Separation of Concerns)
- 每个组件/类应该只负责单一功能
- 业务逻辑与数据访问逻辑分离
- 表示逻辑与业务逻辑分离

### 依赖注入(Dependency Injection)
- 使用Spring的依赖注入机制
- 避免直接创建依赖对象
- 利于单元测试和解耦

```java
@Service
public class UserService {
    private final UserRepository userRepository;
    
    // 通过构造函数注入依赖
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
}
```

### 接口隔离(Interface Segregation)
- 服务应该通过接口定义
- 接口应该小而专注，避免过大的"万能"接口

### 单一职责(Single Responsibility)
- 每个类应该有一个单一的责任
- 当需要修改时，只有一个原因导致修改

## MyBatis SQL映射规范

### XML映射文件规范
- SQL语句必须写在resources目录下的mapper文件夹中的XML文件中，而不是在Java接口文件中使用注解
- 每个XML文件应该对应一个Mapper接口
- XML文件的namespace必须与对应的Mapper接口全限定名一致
- 查询使用select标签，插入使用insert标签，更新使用update标签，删除使用delete标签
- 生成的主键应通过useGeneratedKeys和keyProperty属性返回
- 对于复杂查询，应使用动态SQL功能（如if, choose, when, otherwise, trim, where, set等）
- 参数命名清晰，避免使用通用名称如"param1","param2"

### Mapper接口规范
- Mapper接口应放在mapper包下
- 接口应使用@Mapper注解标记
- 方法名应与XML中对应的SQL ID一致
- 使用@Param注解标注参数，确保与XML中的参数名匹配
- 不在接口中使用@Select, @Insert, @Update, @Delete等注解

### 示例
正确的Mapper接口:
```java
@Mapper
public interface ApiTestReportMapper {
    int insertReport(ApiTestReport report);
    ApiTestReport selectReportById(int id);
    List<ApiTestReport> selectReportsByPage(@Param("keyword") String keyword, 
                                           @Param("status") String status,
                                           @Param("offset") int offset, 
                                           @Param("pageSize") int pageSize);
}
```

对应的XML文件 (resources/mapper/ApiTestReportMapper.xml):
```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.verityx.mapper.ApiTestReportMapper">
    <insert id="insertReport" parameterType="com.example.verityx.entity.ApiTestReport" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO api_test_report(api_name, url, method, status) 
        VALUES(#{apiName}, #{url}, #{method}, #{status})
    </insert>
    
    <select id="selectReportById" resultType="com.example.verityx.entity.ApiTestReport">
        SELECT * FROM api_test_report WHERE id = #{id}
    </select>
</mapper>
```

## Swagger API文档规范

### Controller类规范
- 所有Controller类必须使用@Tag注解标注，提供name和description
- 所有公开API方法必须使用@Operation注解，提供summary和description
- API参数应使用@Parameter注解进行说明
- 返回值应使用@ApiResponse注解说明可能的响应状态和内容

### 示例
```java
@RestController
@RequestMapping("/api/apitestreports")
@Tag(name = "API测试报告管理", description = "API测试报告的增删改查接口")
public class ApiTestReportController {

    @GetMapping("/list")
    @Operation(summary = "分页查询API测试报告", description = "根据关键字、状态和分页参数查询API测试报告")
    public JsonResult getReportsList(@RequestParam(value = "page") Integer page,
                                     @RequestParam(value = "pageSize") Integer pageSize) {
        // 实现代码
    }
    
    @PostMapping
    @Operation(summary = "创建API测试报告", description = "创建新的API测试报告")
    public JsonResult createReport(@RequestBody ApiTestReportDTO reportDTO) {
        // 实现代码
    }
}
```

## 前后端交互规范

### 接口URL规范
- RESTful风格，使用名词复数形式
- 资源分层，例如`/api/projects/{projectId}/testcases`
- 使用小写字母，单词之间用连字符（-）分隔
- 使用HTTP方法表达操作类型（GET查询，POST创建，PUT更新，DELETE删除）

### 请求参数规范
- GET请求使用URL参数，例如`?page=1&pageSize=10`
- POST/PUT请求使用JSON格式的请求体
- 日期格式使用ISO 8601标准：`yyyy-MM-dd'T'HH:mm:ss.SSSXXX`
  例如：`2023-05-15T10:30:00.000+08:00`
- 布尔值使用true/false而非0/1

