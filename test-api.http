### VerityX系统设置模块 - API测试

### 全局变量
@baseUrl = http://localhost:8080
@jsonContentType = application/json

### --------------- 用户管理 API 测试 ---------------

### 1. 分页查询用户列表
GET {{baseUrl}}/api/sys/users?page=1&size=10
Content-Type: {{jsonContentType}}

### 2. 条件查询用户列表
GET {{baseUrl}}/api/sys/users?page=1&size=10&username=admin&phone=1380000&deptId=1&status=true
Content-Type: {{jsonContentType}}

### 3. 获取用户详情
GET {{baseUrl}}/api/sys/users/1
Content-Type: {{jsonContentType}}

### 4. 创建用户
POST {{baseUrl}}/api/sys/users
Content-Type: {{jsonContentType}}

{
  "username": "testuser",
  "password": "Test123456",
  "realName": "测试用户",
  "nickname": "小测",
  "gender": "男",
  "email": "test@example.com",
  "phone": "13800138000",
  "avatar": "",
  "deptId": 1,
  "roleIds": [2, 3],
  "remark": "测试创建用户"
}

### 5. 更新用户
PUT {{baseUrl}}/api/sys/users
Content-Type: {{jsonContentType}}

{
  "id": 2,
  "realName": "测试用户更新",
  "nickname": "小测更新",
  "gender": "女",
  "email": "test_update@example.com",
  "phone": "13900139000",
  "avatar": "",
  "deptId": 2,
  "roleIds": [2],
  "remark": "测试更新用户"
}

### 6. 删除用户
DELETE {{baseUrl}}/api/sys/users/2
Content-Type: {{jsonContentType}}

### 7. 批量删除用户
DELETE {{baseUrl}}/api/sys/users/batch
Content-Type: {{jsonContentType}}

[3, 4, 5]

### 8. 修改用户状态
PUT {{baseUrl}}/api/sys/users/2/status?status=false
Content-Type: {{jsonContentType}}

### 9. 重置用户密码
PUT {{baseUrl}}/api/sys/users/reset-password
Content-Type: {{jsonContentType}}

{
  "userId": 2,
  "newPassword": "NewPass123"
}

### 10. 获取用户权限列表
GET {{baseUrl}}/api/sys/users/2/permissions
Content-Type: {{jsonContentType}}

### 11. 根据部门ID获取用户列表
GET {{baseUrl}}/api/sys/users/dept/1
Content-Type: {{jsonContentType}}

### --------------- 角色管理 API 测试 ---------------

### 1. 分页查询角色列表
GET {{baseUrl}}/api/sys/roles?page=1&size=10
Content-Type: {{jsonContentType}}

### 2. 条件查询角色列表
GET {{baseUrl}}/api/sys/roles?page=1&size=10&roleName=管理员&status=true
Content-Type: {{jsonContentType}}

### 3. 获取所有角色列表
GET {{baseUrl}}/api/sys/roles/all
Content-Type: {{jsonContentType}}

### 4. 获取角色详情
GET {{baseUrl}}/api/sys/roles/1
Content-Type: {{jsonContentType}}

### 5. 创建角色
POST {{baseUrl}}/api/sys/roles
Content-Type: {{jsonContentType}}

{
  "roleName": "测试角色",
  "roleCode": "TEST_ROLE",
  "sort": 5,
  "isActive": true,
  "isSystem": false,
  "remark": "测试创建角色"
}

### 6. 更新角色
PUT {{baseUrl}}/api/sys/roles
Content-Type: {{jsonContentType}}

{
  "id": 3,
  "roleName": "测试角色更新",
  "roleCode": "TEST_ROLE_UPDATE",
  "sort": 6,
  "isActive": true,
  "isSystem": false,
  "remark": "测试更新角色"
}

### 7. 删除角色
DELETE {{baseUrl}}/api/sys/roles/3
Content-Type: {{jsonContentType}}

### 8. 批量删除角色
DELETE {{baseUrl}}/api/sys/roles/batch
Content-Type: {{jsonContentType}}

[4, 5]

### 9. 修改角色状态
PUT {{baseUrl}}/api/sys/roles/3/status?status=false
Content-Type: {{jsonContentType}}

### 10. 分配角色权限
POST {{baseUrl}}/api/sys/roles/3/permissions
Content-Type: {{jsonContentType}}

[1, 2, 3, 4, 5]

### 11. 获取角色权限ID列表
GET {{baseUrl}}/api/sys/roles/3/permissions
Content-Type: {{jsonContentType}}

### 12. 根据用户ID获取角色列表
GET {{baseUrl}}/api/sys/roles/user/1
Content-Type: {{jsonContentType}}

### --------------- 权限管理 API 测试 ---------------

### 1. 获取所有权限列表
GET {{baseUrl}}/api/sys/permissions
Content-Type: {{jsonContentType}}

### 2. 根据权限类型获取权限列表
GET {{baseUrl}}/api/sys/permissions/type/menu
Content-Type: {{jsonContentType}}

### 3. 获取权限详情
GET {{baseUrl}}/api/sys/permissions/1
Content-Type: {{jsonContentType}}

### 4. 创建权限
POST {{baseUrl}}/api/sys/permissions
Content-Type: {{jsonContentType}}

{
  "permissionName": "测试权限",
  "permissionCode": "TEST:PERMISSION",
  "permissionType": "button",
  "parentId": 1,
  "path": "",
  "component": "",
  "icon": "",
  "sort": 5,
  "isActive": true,
  "isSystem": false,
  "remark": "测试创建权限"
}

### 5. 更新权限
PUT {{baseUrl}}/api/sys/permissions
Content-Type: {{jsonContentType}}

{
  "id": 4,
  "permissionName": "测试权限更新",
  "permissionCode": "TEST:PERMISSION:UPDATE",
  "permissionType": "button",
  "parentId": 1,
  "path": "",
  "component": "",
  "icon": "edit",
  "sort": 6,
  "isActive": true,
  "isSystem": false,
  "remark": "测试更新权限"
}

### 6. 删除权限
DELETE {{baseUrl}}/api/sys/permissions/4
Content-Type: {{jsonContentType}}

### 7. 根据父ID获取权限列表
GET {{baseUrl}}/api/sys/permissions/parent/1
Content-Type: {{jsonContentType}}

### 8. 根据角色ID获取权限列表
GET {{baseUrl}}/api/sys/permissions/role/1
Content-Type: {{jsonContentType}}

### 9. 根据用户ID获取权限列表
GET {{baseUrl}}/api/sys/permissions/user/1
Content-Type: {{jsonContentType}}

### 10. 获取菜单权限列表
GET {{baseUrl}}/api/sys/permissions/menus
Content-Type: {{jsonContentType}}

### 11. 根据用户ID获取菜单权限列表
GET {{baseUrl}}/api/sys/permissions/menus/user/1
Content-Type: {{jsonContentType}}

### --------------- 部门管理 API 测试 ---------------

### 1. 获取所有部门列表
GET {{baseUrl}}/api/sys/depts
Content-Type: {{jsonContentType}}

### 2. 获取部门详情
GET {{baseUrl}}/api/sys/depts/1
Content-Type: {{jsonContentType}}

### 3. 创建部门
POST {{baseUrl}}/api/sys/depts
Content-Type: {{jsonContentType}}

{
  "deptName": "测试部门",
  "deptCode": "TEST_DEPT",
  "parentId": 1,
  "leader": "测试领导",
  "phone": "13800138000",
  "email": "test@example.com",
  "sort": 5,
  "isActive": true,
  "remark": "测试创建部门"
}

### 4. 更新部门
PUT {{baseUrl}}/api/sys/depts
Content-Type: {{jsonContentType}}

{
  "id": 3,
  "deptName": "测试部门更新",
  "deptCode": "TEST_DEPT_UPDATE",
  "parentId": 1,
  "leader": "测试领导更新",
  "phone": "13900139000",
  "email": "test_update@example.com",
  "sort": 6,
  "isActive": true,
  "remark": "测试更新部门"
}

### 5. 删除部门
DELETE {{baseUrl}}/api/sys/depts/3
Content-Type: {{jsonContentType}}

### 6. 修改部门状态
PUT {{baseUrl}}/api/sys/depts/3/status?status=false
Content-Type: {{jsonContentType}}

### 7. 根据父ID获取部门列表
GET {{baseUrl}}/api/sys/depts/parent/1
Content-Type: {{jsonContentType}}

### 8. 根据用户ID获取部门列表
GET {{baseUrl}}/api/sys/depts/user/1
Content-Type: {{jsonContentType}}

### 9. 查询部门及其下级部门ID列表
GET {{baseUrl}}/api/sys/depts/1/children/ids
Content-Type: {{jsonContentType}}

### 10. 查询用户的主部门
GET {{baseUrl}}/api/sys/depts/user/1/primary
Content-Type: {{jsonContentType}}

### --------------- 系统监控与维护 API 测试 ---------------

### 1. 系统监控服务 API

### 1.1 获取服务器状态
GET http://localhost:8080/api/system/monitor/server-status
Content-Type: application/json

### 1.2 获取数据库状态
GET http://localhost:8080/api/system/monitor/database-status
Content-Type: application/json

### 1.3 获取测试引擎状态
GET http://localhost:8080/api/system/monitor/test-engine-status
Content-Type: application/json

### 1.4 获取系统状态概览
GET http://localhost:8080/api/system/monitor/overview
Content-Type: application/json

### 1.5 获取监控历史数据
GET http://localhost:8080/api/system/monitor/history?monitorType=SERVER&startTime=2023-07-01 00:00:00&endTime=2023-07-31 23:59:59
Content-Type: application/json

### 2. 系统日志 API

### 2.1 分页查询系统日志
GET http://localhost:8080/api/system/logs?page=1&size=10&logType=OPERATION&logLevel=INFO,WARN&startTime=2023-07-01 00:00:00&endTime=2023-07-31 23:59:59&keyword=登录
Content-Type: application/json

### 2.2 添加系统日志
POST http://localhost:8080/api/system/logs
Content-Type: application/json

{
  "logType": "OPERATION",
  "logLevel": "INFO",
  "module": "用户管理",
  "content": "用户登录成功",
  "userId": 1,
  "username": "admin",
  "ipAddress": "127.0.0.1",
  "traceId": "trace123456",
  "extraInfo": "{\"browser\":\"Chrome\",\"os\":\"Windows 10\"}"
}

### 2.3 清理历史日志
DELETE http://localhost:8080/api/system/logs/cleanup?beforeTime=2023-06-01 00:00:00
Content-Type: application/json

### 3. 数据备份 API

### 3.1 分页查询备份列表
GET http://localhost:8080/api/system/backups?page=1&size=10&backupType=MANUAL&status=SUCCESS&startTime=2023-07-01 00:00:00&endTime=2023-07-31 23:59:59
Content-Type: application/json

### 3.2 创建备份
POST http://localhost:8080/api/system/backups
Content-Type: application/json

{
  "backupName": "手动备份_测试",
  "backupType": "MANUAL"
}

### 3.3 获取备份详情
GET http://localhost:8080/api/system/backups/1
Content-Type: application/json

### 3.4 删除备份
DELETE http://localhost:8080/api/system/backups/1
Content-Type: application/json

### 3.5 恢复备份
POST http://localhost:8080/api/system/backups/1/restore
Content-Type: application/json

### 3.6 下载备份
GET http://localhost:8080/api/system/backups/1/download
Content-Type: application/json

### 4. 系统清理配置 API

### 4.1 获取所有清理配置
GET http://localhost:8080/api/system/cleanup/configs
Content-Type: application/json

### 4.2 根据配置组获取清理配置
GET http://localhost:8080/api/system/cleanup/configs/group/DATA_CLEANUP
Content-Type: application/json

### 4.3 保存清理配置
POST http://localhost:8080/api/system/cleanup/configs
Content-Type: application/json

{
  "configKey": "keepLogDays",
  "configValue": "180",
  "configGroup": "DATA_CLEANUP",
  "description": "保留日志天数"
}

### 4.4 执行清理操作
POST http://localhost:8080/api/system/cleanup/execute/DATA_CLEANUP
Content-Type: application/json

### 4.5 分页查询清理日志
GET http://localhost:8080/api/system/cleanup/logs?page=1&size=10&cleanupType=DATA_CLEANUP&status=SUCCESS&startTime=2023-07-01 00:00:00&endTime=2023-07-31 23:59:59
Content-Type: application/json

### 4.6 获取清理日志详情
GET http://localhost:8080/api/system/cleanup/logs/1
Content-Type: application/json 