VerityX平台功能整合思路
分析完代码后，我发现VerityX平台已经完成了大部分功能模块，但这些功能目前相对独立，没有形成完整的工作流。以下是整合各功能模块的思路：
整体架构设计
1. 以项目为中心的工作流
将"项目"作为整个系统的核心单位：
所有测试活动（测试计划、用例、报告等）都归属于特定项目
在UI上添加项目切换器，让用户能够在不同项目间快速切换
项目级权限控制，限制用户只能访问其所属项目的资源
2. 测试流程整合
构建完整的测试生命周期流程：
Apply to 功能菜单
测试计划 → 测试用例设计 → 测试执行(UI/接口) → 缺陷管理 → 测试报告
实现方法：
在测试计划中可直接关联测试用例
测试用例执行失败后可一键创建缺陷
缺陷可关联到对应用例和测试计划
测试报告自动聚合测试计划、用例和缺陷信息
3. 数据关联模型
建立核心实体间的关联关系：
测试计划 ⟷ 测试用例（多对多）
测试用例 ⟷ 缺陷（一对多）
测试计划 ⟷ 测试报告（一对多）
UI测试套件 ⟷ UI测试用例（多对多）
接口测试集 ⟷ 接口测试用例（多对多）
4. 功能整合点
4.1 测试管理与UI/接口测试整合
测试用例页面中增加一键创建UI测试/接口测试的功能
测试计划可同时包含手工测试、UI自动化测试和接口自动化测试
统一的测试报告包含所有类型测试的结果
4.2 统一的仪表盘
在概览页面整合所有测试类型的执行情况
显示测试覆盖率、通过率、缺陷趋势等综合数据
按项目筛选数据，提供全局和项目级视图
4.3 统一的通知系统
测试计划开始/完成通知
缺陷创建/状态变更通知
自动化测试执行结果通知
用户可订阅关心的通知类型
4.4 CI/CD 集成
将UI测试和接口测试集成到CI/CD流程
通过API或Jenkins插件触发测试执行
自动生成测试报告并通知相关人员
实现路径
数据模型改造：
修改实体关系，增加必要的外键引用
增加项目ID字段到各核心表中
UI流程优化：
增加跨功能导航按钮（如从测试计划直接跳转到关联的用例列表）
实现上下文菜单，提供快捷操作
API整合：
设计跨模块API，支持综合数据查询
实现批量操作接口，如批量执行测试用例
统一搜索功能：
全局搜索框，可搜索测试计划、用例、缺陷等
高级筛选功能，支持复合条件查询
统一用户体验：
一致的UI设计和交互模式
完善的帮助系统和用户引导
这种整合将显著提高测试效率，减少在不同功能间切换的成本，同时提供更完整的测试数据视图。